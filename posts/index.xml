<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebSec Seminar Blog</title>
    <link>https://websecseminar.github.io/posts/</link>
    <description>Recent content on WebSec Seminar Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://websecseminar.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CVE-2015-1819</title>
      <link>https://websecseminar.github.io/posts/team_sadlittleunicorn_cve-2015-1819/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://websecseminar.github.io/posts/team_sadlittleunicorn_cve-2015-1819/</guid>
      <description>Einführung CVE-2015-1819 beschreibt eine Sicherheitslücke, die in vielen XML-Parsern vorhanden war und durch die fehlende Absicherung gegen rekursiv definierte XML-Dokumente definiert wurde. Diese Lücke ermöglichte es dank des stark erhöhten Hauptspeicheraufwands, der durch das Parsen der XML-Dokumente entsteht, denial of service (DoS)-Angriffe auf die betroffenen Systeme auszuführen. Die Sicherheitslücke lässt sich ohne viele Kenntnisse ausnutzen und bietet abgesehen von der Auswirkung auf die Performance des Systems keine Möglichkeit Daten oder das System zu kompromittieren.</description>
    </item>
    
    <item>
      <title>CVE-2017-8422</title>
      <link>https://websecseminar.github.io/posts/cve-2017-8422/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://websecseminar.github.io/posts/cve-2017-8422/</guid>
      <description>CVE-2017-8422  Einführung: Die „K Desktop Environment“ (KDE) ist eine grafische Desktopumgebung für das X Window System. Die KDElibs-Pakete enthalten Kernellibrarys für die K Desktop Environment. In der Art und Weise, wie die KDElibs D-Bus-Nachrichten verarbeitet werden, wurde ein Fehler bei der Rechteausweitung gefunden. Ein lokaler Benutzer könnte diesen Fehler möglicherweise nutzen, um Root-Rechte zu erlangen, indem er eine Caller-ID fälscht und eine privilegierte Hilfsanwendung nutzt. (CVE-2017-8422).
Wir werden in diesem Blog das Gesamtproblem beschreiben, indem wir den smb4k-Code durchgehen und erklären, welche DBUS-Funktionen aufgerufen werden und wie sich ein bestimmter smb4k-Bug auf das Gesamtbild des KAuth-Fehlers abbildet.</description>
    </item>
    
    <item>
      <title>CVE-2005-2395</title>
      <link>https://websecseminar.github.io/posts/cve_post/</link>
      <pubDate>Sun, 14 Nov 2021 00:29:41 -0600</pubDate>
      
      <guid>https://websecseminar.github.io/posts/cve_post/</guid>
      <description>Allgemeine Beschreibung Die CVE-2005-2395 handelt von einer Schwachstelle aus dem Jahre 2005 bei der im Browser Mozilla Firefox, ein Fehler in der User Authentifikation gefunden wurde.
Die CVE gehört zur CWE-312, welche davon handelt, dass sensitive Informationen unverschlüsselt gespeichert und verschickt werden. Daten unverschlüsselt zu
speichern oder zu verschicken bietet Angreifern die Möglichkeit einfach an sensitive Informationen und sich Zugriff zu privaten Konten oder Servern zu verschaffen.
Die CVE-2005-2395 hat eine CVSS-Bewertung von 5.</description>
    </item>
    
    <item>
      <title>CVE-2018-14728 – SSRF</title>
      <link>https://websecseminar.github.io/posts/cve-2018-14728_team_cooler_name/</link>
      <pubDate>Sat, 13 Nov 2021 00:29:41 -0600</pubDate>
      
      <guid>https://websecseminar.github.io/posts/cve-2018-14728_team_cooler_name/</guid>
      <description>Einführung Der CVE-2018-14728, beschreibt eine SSRF Sicherheitslücke in einer Upload-Funktion im Open-Source-Projekt Responsive FileManager. Über diese war es möglich, auf interne Daten wie zum Beispiel Passwörter zuzugreifen, auf die ein Benutzer keinen Zugriff haben sollte.
Der Responsive FileManager ist ein Datei-Verwaltungssystem, welches sowohl alleinstehend als auch als Plug-in verwendet werden kann. Hierbei bietet das Programm eine Vielzahl an hilfreichen Funktionen wie beispielsweise automatische Vorschaubilderstellung und Kompatibilität für Multi-Nutzer.
Sicherheitslücke Im Responsive FileManager ist es möglich, eine Datei von der eigenen Festplatte hochzuladen oder diese über eine URL auf den FileManager herunterzuladen.</description>
    </item>
    
    <item>
      <title>OWASP10 – Server-Side Request Forgery</title>
      <link>https://websecseminar.github.io/posts/owasp_10_team_cooler_name/</link>
      <pubDate>Mon, 01 Nov 2021 00:29:41 -0600</pubDate>
      
      <guid>https://websecseminar.github.io/posts/owasp_10_team_cooler_name/</guid>
      <description>Einführung Server-Side Request Forgery, kurz SSRF, ist eine Angriffskategorie, die in der Praxis zwar selten von Angreifern genutzt wird, für die jedoch eine überdurchschnittliche Anzahl an Tests durchgeführt wird. Der Grund hierfür sind die schweren Folgen, welche durch das Gelingen eines solchen Angriffs ausgelöst werden können. Im Folgenden beschäftigt sich dieser Blogpost mit verschiedenen Aspekten dieser Kategorie von Angriffen.
Entwicklung und Risiken Server-Side Request Forgery (SSRF) spielte früher nur eine untergeordnete Rolle, zwar war bereits der Zugriff auf interne Admin Panels und Netzwerkscans möglich, allerdings liefen viele wichtige Abläufe unabhängig ab.</description>
    </item>
    
    <item>
      <title>OWASP05 - Security Misconfiguration</title>
      <link>https://websecseminar.github.io/posts/owasp_5_team_sadlittleunicorn/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://websecseminar.github.io/posts/owasp_5_team_sadlittleunicorn/</guid>
      <description>Einführung Den 5. Platz der von OWASP benannten kritischsten Sicherheitsrisikos von Webanwendungen belegt die „Security Misconfiguration&amp;quot;. Die Security Misconfiguration beschreibt die Fehlkonfiguration von Anwendungen, die im Application-Stack einer Web-Anwendung liegen, das kann z.B. eine Datenbank oder der Webserver sein. Vor allem beim nicht deaktiviertem oder neu konfigurierten Default-Account ist diese Schwachstelle sehr einfach ausnutzbar. Dieses Risiko ist über die letzten Jahre präsenter geworden, ein Grund dafür ist der vermehrte Wechsel in stark konfigurierbare Anwendungen.</description>
    </item>
    
    <item>
      <title>OWASP03 - Injection</title>
      <link>https://websecseminar.github.io/posts/owasp_3_team_injectiondetection/</link>
      <pubDate>Tue, 19 Oct 2021 00:29:41 -0600</pubDate>
      
      <guid>https://websecseminar.github.io/posts/owasp_3_team_injectiondetection/</guid>
      <description>Injection is a class of vulnerabilities which have one specific value in common. Every injection type can be broken down to missing data validation.
All types of injection are caused by unfiltered or insufficiently validated data that triggers unwanted behaviour of the application. Malicious (payload) data gets partly interpreted as commands by the system and can, in the worst case, lead to a fully attacker-controlled system. Popular injection types are SQL Injections, Cross-Site-Scripting (XSS), File Inclusion Attacks (LFI/RFI) and many more.</description>
    </item>
    
    <item>
      <title>SQL injection - CVE 2019-9083</title>
      <link>https://websecseminar.github.io/posts/owasp_3_cve_2019-9083/</link>
      <pubDate>Tue, 19 Oct 2021 00:29:41 -0600</pubDate>
      
      <guid>https://websecseminar.github.io/posts/owasp_3_cve_2019-9083/</guid>
      <description>Description Injections, and furthermore SQL injections, are still one of the most popular and most attractive vulnerability classes for hackers.
CVE 2019-9083 is an example of CWE-89 (Improper Neutralization of Special Elements used in an SQL Command) and affects SQLiteManager (version 1.2.0 and 1.2.4). SQLiteManager is a piece of open-source software, which can be used to manage SQLite databases right out of the webbrowser. As it is completely written on PHP, it runs using an apache server and is powered by an underlying MySQL instance.</description>
    </item>
    
    <item>
      <title>OWASP07 - Authentication</title>
      <link>https://websecseminar.github.io/posts/owasp07_i_fehler_bei_der_identifizierung_und_authentifizierung/</link>
      <pubDate>Tue, 05 Oct 2021 00:29:41 -0600</pubDate>
      
      <guid>https://websecseminar.github.io/posts/owasp07_i_fehler_bei_der_identifizierung_und_authentifizierung/</guid>
      <description>OWASP07 I Fehler bei der Identifizierung und Authentifizierung  Einführung: Anwendungsfunktionen im Zusammenhang mit der Authentifizierung und dem Session-Management sind häufig falsch implementiert, so dass Angreifer Passwörter, Schlüssel oder Session-Tokens kompromittieren oder andere Fehler in der Implementierung ausnutzen können, um vorübergehend oder dauerhaft die Identität von Benutzern zu übernehmen. Unter Ausnutzung dieser Schwachstelle kann ein Angreifer Benutzersitzungen übernehmen und auf Informationen zugreifen oder diese ändern, für die er keine Berechtigung hat.</description>
    </item>
    
    <item>
      <title>OWASP04 - Insecure Design</title>
      <link>https://websecseminar.github.io/posts/owasp_4_team_diedieihretabellekaputtgemachthaben/</link>
      <pubDate>Sun, 03 Oct 2021 00:29:41 -0600</pubDate>
      
      <guid>https://websecseminar.github.io/posts/owasp_4_team_diedieihretabellekaputtgemachthaben/</guid>
      <description>Einführung Planung ist oft das Schlüsselelement zu allem was wir tun. So auch in der Software-Entwicklung. Insecure Design ist eine Sicherheitsschwachstelle, die durch schlechte oder nicht weitsichtige Planung entsteht. Grade in den immer größer werdenden Projekten spielt gute Planung und damit auch Secure Design eine wichtige und nicht zu unterschätzenden Rolle.
Was ist Insecure Design Unsichers Design oder Insecure Design entsteht meistens, wenn bei der Planung der Software kaum bis gar kein Schwerpunkt auf die Sicherheit gelegt wird.</description>
    </item>
    
    <item>
      <title>OWASP A06 - CVEs</title>
      <link>https://websecseminar.github.io/posts/owasp_6_cve/</link>
      <pubDate>Thu, 30 Sep 2021 00:29:41 -1015</pubDate>
      
      <guid>https://websecseminar.github.io/posts/owasp_6_cve/</guid>
      <description>Einleitung - Jede Sicherheitslücke gehört zu OWASP A06! Die allgemein gehaltene Formulierung der OWASP-Kategorie A06 aus 2021 hat zur Folge, dass viele Sicherheitslücken, zu ihr zählen. OWASP A06 beschreibt Sicherheitslücken, die in Abhängigkeiten/Dependencies von Softwareprodukten enthalten sind. Es gibt sowohl viele Softwareprodukte als auch auf Entwicklungsebene viele Abhängigkeiten, bei denen Updates ausgelassen werden. Also ist die genaue Art der Sicherheitslücke, wie sie ein System verwundbar macht und welchen Einfluss sie auf das System hat, nicht festgelegt.</description>
    </item>
    
    <item>
      <title>OWASP06 - Vulnerable and Outdated Components</title>
      <link>https://websecseminar.github.io/posts/owasp_6_die_drei/</link>
      <pubDate>Thu, 30 Sep 2021 00:29:41 -1015</pubDate>
      
      <guid>https://websecseminar.github.io/posts/owasp_6_die_drei/</guid>
      <description>Einleitung - Welche Fehler machen ein System verwundbar? Fast alle Anwendungen verwenden in irgendeiner Form third-party Komponenten. Dies ist oftmals auch sinnvoll, um Zeit und Arbeit einzusparen. Durch die Benutzung dieser externen Komponenten können aber auch Probleme entstehen. Da nicht immer die neusten Versionen verwendet werden, können Sicherheitsschwachstellen weiterhin existieren, die von Angreifern genutzt werden können. Betrachtet man Statistiken, so wird man feststellen, dass sehr oft Open-Source-Software mit bekannten Schwachstellen genutzt wird.</description>
    </item>
    
  </channel>
</rss>
